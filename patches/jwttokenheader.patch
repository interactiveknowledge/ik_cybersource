diff --git a/vendor/cybersource/rest-client-php/lib/Authentication/Jwt/JsonWebTokenHeader.php b/vendor/cybersource/rest-client-php/lib/Authentication/Jwt/JsonWebTokenHeader.php
index 5c141b1120..d990411ba5 100644
--- a/vendor/cybersource/rest-client-php/lib/Authentication/Jwt/JsonWebTokenHeader.php
+++ b/vendor/cybersource/rest-client-php/lib/Authentication/Jwt/JsonWebTokenHeader.php
@@ -9,12 +9,12 @@
 use Firebase\JWT\JWT as JWT;
 use CyberSource\Logging\LogFactory as LogFactory;
 
-require_once 'vendor/autoload.php';
+// require_once 'vendor/autoload.php';
 
-class JsonWebTokenHeader 
+class JsonWebTokenHeader
 {
     private static $logger = null;
-    
+
     /**
      * Constructor
      */
@@ -26,7 +26,7 @@ public function __construct(\CyberSource\Logging\LogConfiguration $logConfig)
     }
 
     //Get the JasonWeb Token
-    public function getJsonWebToken($jwtBody, $merchantConfig) 
+    public function getJsonWebToken($jwtBody, $merchantConfig)
     {
         $merchantID = $merchantConfig->getMerchantID();
         $keyPass = $merchantConfig->getKeyPassword();
@@ -35,7 +35,7 @@ public function getJsonWebToken($jwtBody, $merchantConfig)
         $keyFileName = $merchantConfig->getKeyFileName();
         if(empty($keyalias)){
             $keyalias = $merchantID;
-        } 
+        }
         else if(($keyalias != $merchantID))
         {
             $keyalias = $merchantID;
@@ -43,8 +43,8 @@ public function getJsonWebToken($jwtBody, $merchantConfig)
         }
         if(empty($keyFileName)){
             $keyFileName = $merchantID;
-        } 
-        
+        }
+
         if(empty($keyDir)){
             $keyDir = GlobalParameter::KEY_DIR_PATH_DEFAULT;
         }
@@ -58,39 +58,44 @@ public function getJsonWebToken($jwtBody, $merchantConfig)
 
         $filePath = $keyDir.$keyFileName.".p12";
         //get certificate from p12
-        if (file_exists($filePath)) 
+        if (file_exists($filePath))
         {
             $cert_store = file_get_contents($filePath);
             $cacheKey = $keyFileName."_".strtotime(date("F d Y H:i:s", filemtime($filePath)));
         }
         else
-        { 
+        {
             $exception = new AuthException(GlobalParameter::KEY_FILE_INCORRECT, 0);
             self::$logger->error("AuthException : " . GlobalParameter::KEY_FILE_INCORRECT);
             self::$logger->close();
             throw $exception;
         }
 
-        if(!empty($cacheKey))
-            $cache_cert_store = apcu_fetch($cacheKey);
-        if($cache_cert_store ==false ){
-            $cache_cert_store="";
-            $result = apcu_store("$cacheKey", $cert_store);
-            $cache_cert_store = apcu_fetch($cacheKey);
+        if (function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN)) {
+          if(!empty($cacheKey))
+          $cache_cert_store = apcu_fetch($cacheKey);
+          if($cache_cert_store ==false ){
+              $cache_cert_store="";
+              $result = apcu_store("$cacheKey", $cert_store);
+              $cache_cert_store = apcu_fetch($cacheKey);
+          }
+        }
+        else {
+          $cache_cert_store = $cert_store;
         }
-        //read the certificate from cert obj    
-        if (openssl_pkcs12_read($cache_cert_store, $cert_info, $keyPass)) 
+        //read the certificate from cert obj
+        if (openssl_pkcs12_read($cache_cert_store, $cert_info, $keyPass))
         {
             //Creating public key using certificate Not working in decryption
             $certdata= openssl_x509_parse($cert_info['cert'],1);
-            $privateKey = $cert_info['pkey']; 
-            $publicKey = $this->PemToDer($cert_info['cert']); 
+            $privateKey = $cert_info['pkey'];
+            $publicKey = $this->PemToDer($cert_info['cert']);
             $x5cArray = array($publicKey);
             $headers = array(
                 "v-c-merchant-id" => $keyalias,
                 "x5c" => $x5cArray
             );
-            
+
             self::$logger->close();
             return JWT::encode($jwtBody, $privateKey, GlobalParameter::RS256, "", $headers);
         }
@@ -108,6 +113,6 @@ public function PemToDer($Pem){
         unset($lines[count($lines)-1]);
         unset($lines[0]);
         return implode("\n", $lines);
-    }    
+    }
 }
 ?>
